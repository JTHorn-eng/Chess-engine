{- 
EVERYTHING MUST BE CREATED FROM FIRST PRINCIPLES

-}

module Algorithms
(
    bubbleSort

)

 where

deleteFromList :: (Eq a) => a -> [a] -> [a]
deleteFromList _ [] = []
deleteFromList b (l:ls)
    |  b == l = ls
    |  otherwise = l : deleteFromList b ls 

bubbleSort :: (Ord a, Eq a) => [a] -> [a]
bubbleSort [] = []
bubbleSort ls = (bubbleSort (deleteFromList (maximum ls) ls)) ++ [(maximum ls)]

insert :: (Num a, Ord a, Eq a) => [a] -> a -> [a]
insert [] x = [x]
insert (l:ls) x
    | (l >= x) = x:l:ls  
    | (ls == []) = l:x:[]
    | (l < x ) = l : insert ls x
      
    
insertion :: (Num a, Ord a, Eq a) => [a] -> [a] -> [a]
insertion ls [] = ls 
insertion ls (x:xs) = insertion (insert ls x) xs

insertionSort :: (Num a, Ord a, Eq a) => [a] -> [a]
insertionSort ls = insertion [] ls








































































































































































































































































































































































































































































































































