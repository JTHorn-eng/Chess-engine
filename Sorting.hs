{-# LANGUAGE FlexibleContexts #-}

{- 
EVERYTHING MUST BE CREATED FROM FIRST PRINCIPLES

TODO 
-Sorting algorithms: quick, counting, radix
-Graphs:Nodes, BFS, DFS, A*, Djikstra, Kruskal, Prims (use custom data type)
-Trees: basic operations, linear, binary, AVL, red,black, B (use custom data type)

-probably want to measure efficiency, runtime, other information
-display output at each stage of sorting

-}
module Sorting
(
    bubbleSort,
    insertionSort,
    quickSort,
    mergeSort
    
)

where

deleteFromList :: (Eq a) => a -> [a] -> [a]
deleteFromList _ [] = []
deleteFromList b (l:ls)
    |  b == l = ls
    |  otherwise = l : deleteFromList b ls 

bubbleSort :: (Ord a, Eq a) => [a] -> [a]
bubbleSort [] = []
bubbleSort ls = (bubbleSort (deleteFromList (maximum ls) ls)) ++ [(maximum ls)]

insert :: (Num a, Ord a) => [a] -> a -> [a]
insert [] x = [x]
insert (l:ls) x 
    | (l < x) = l : (insert ls x)
    | otherwise = x:l:ls
    
insertionSort :: (Num a, Ord a) => [a] -> [a] 
insertionSort [] = []
insertionSort (x:xs) = insert (insertionSort xs) x

merge :: (Ord a, Num a) => [a] -> [a] -> [a]
merge [] ls = ls
merge ls [] = ls 
merge (a:as) (b:bs)
    | (a < b) = a:merge as (b:bs)
    | otherwise = b:merge (a:as) bs


mergeSort ::(Ord a, Num a) => [a] -> [a]
mergeSort [x] = [x]                                                                                                 --Split all arrays to size 1
mergeSort ls = merge (mergeSort (take half ls)) (mergeSort (drop half ls))
    where half = (length ls) `div` 2


--pivot selected at end of subarray
quickSort :: (Ord a, Num a) => [a] -> [a]
quickSort [] = []
quickSort ls = quickSort (filter (<= pivot) (init ls)) ++ [pivot] ++ quickSort (filter (> pivot) (init ls))
    where pivot = ls !! ((length ls) - 1)
   
    
    







































































































































































































































































































































































































































































































































